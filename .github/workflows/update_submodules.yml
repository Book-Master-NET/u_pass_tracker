name: Update Submodules

on:
  schedule:
    - cron: "*/10 * * * *" # Crono de 10 minutos para ver que ondas
  workflow_dispatch:

permissions:
  contents: write
  actions: read

jobs:
  update-submodules:
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout super-repo
        uses: actions/checkout@v4
        with:
          # Usa el secret de la organizaci√≥n
          token: ${{ secrets.ORG_SUBMODULE_TOKEN }}
          submodules: recursive
          fetch-depth: 0

      - name: Configure Git with organization identity
        run: |
          # Usar identidad de la organizaci√≥n o bot
          git config user.name "github-actions[bot]"
          git config user.email "41898282+github-actions[bot]@users.noreply.github.com"
          
          # Configurar acceso a subm√≥dulos privados de la org
          git config --global url."https://${{ secrets.ORG_SUBMODULE_TOKEN }}@github.com/${{ github.repository_owner }}/".insteadOf "https://github.com/${{ github.repository_owner }}/"

      - name: Verify repository ownership
        run: |
          # Verificamos si realmente pertenecemos o somos owner de la organizacion
          if [[ "${{ github.repository_owner }}" != "Book-Master-NET" ]]; then
            echo "Error: This workflow should only run on organization repositories"
            echo "Current owner: ${{ github.repository_owner }}"
            exit 1
          fi
          echo "‚úÖ Running on organization: ${{ github.repository_owner }}"

      - name: Update submodules
        run: |
          set -e
          echo "Current submodules:"
          git submodule status
          
          # Actualizar con informaci√≥n detallada
          git submodule update --remote --merge --progress
          
          echo "Updated submodules:"
          git submodule status
          git status

      - name: Check for changes
        id: changes
        run: |
          if [[ -n "$(git status --porcelain)" ]]; then
            echo "changes=true" >> $GITHUB_OUTPUT
            
            # Obtener informaci√≥n de los cambios
            echo "=== Changes detected ===" 
            git diff --name-only
            git submodule foreach 'echo "Submodule: $name"; git log --oneline -3 HEAD'
          else
            echo "changes=false" >> $GITHUB_OUTPUT
            echo "No changes found"
          fi

      - name: Create Pull Request instead of direct push
        if: steps.changes.outputs.changes == 'true'
        uses: peter-evans/create-pull-request@v5
        with:
          token: ${{ secrets.ORG_SUBMODULE_TOKEN }}
          commit-message: "chore: update submodules [skip ci]"
          title: "ü§ñ Auto-update submodules"
          body: |
            ## üì¶ Submodule Updates
            
            This PR contains automatic updates to the following submodules:
            
            - Updates detected at: ${{ github.event.head_commit.timestamp }}
            - Triggered by: ${{ github.event_name }}
            
            ### Changes
            See the commits for detailed changes in each submodule.
            
            ---
            *This PR was created automatically by the Update Submodules workflow.*
          branch: chore/update-submodules-${{ github.run_number }}
          delete-branch: true
          reviewers: |
            REMR11
            oscarale28
            DarkKingpro10
          assignees: REMR11

      - name: Direct push (alternative)
        if: steps.changes.outputs.changes == 'true' && github.event_name == 'workflow_dispatch'
        run: |
          set -e
          git add .
          git commit -m "chore: update submodules [skip ci] - manual trigger"
          
          # Push con retry
          max_retries=3
          retry_count=0
          
          while [ $retry_count -lt $max_retries ]; do
            if git push origin main; then
              echo "‚úÖ Successfully pushed changes"
              break
            else
              echo "Push failed, attempt $((retry_count + 1))/$max_retries"
              git pull --rebase origin main
              retry_count=$((retry_count + 1))
              
              if [ $retry_count -eq $max_retries ]; then
                echo "‚ùå Failed to push after $max_retries attempts"
                exit 1
              fi
              
              sleep 2
            fi
          done

      - name: Summary
        if: always()
        run: |
          if [[ "${{ steps.changes.outputs.changes }}" == "true" ]]; then
            echo "‚úÖ Submodules updated successfully"
            echo "üìä Repository: ${{ github.repository }}"
            echo "üè¢ Organization: ${{ github.repository_owner }}"
          else
            echo "‚ÑπÔ∏è No submodule updates needed"
          fi
