name: Update Submodules

on:
  schedule:
     - cron: "0 */20 * * *"   # cada 20 horas
    #- cron: "*/10 * * * *"   # cada 10 minutos para testing
  workflow_dispatch:

permissions:
  contents: write
  actions: read
  pull-requests: write

jobs:
  # Job 1: Limpieza de ramas antiguas
  cleanup-old-branches:
    name: üßπ Clean Old Bot Branches
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Generate GitHub App Token
        id: app-token
        uses: tibdex/github-app-token@v2
        with:
          app_id: ${{ secrets.BOOK_MASTER_NET_GITHUB_APP_ID }}
          private_key: ${{ secrets.BOOK_MASTER_NET_GITHUB_APP_PRIVATE_KEY }}
          installation_retrieval_mode: repository
          installation_retrieval_payload: ${{ github.repository }}

      - name: Clean old bot branches
        continue-on-error: true
        run: |
          echo "üßπ Cleaning old bot branches..."
          git config --global url."https://${{ steps.app-token.outputs.token }}@github.com/".insteadOf "https://github.com/"
          
          # Buscar ramas remotas del bot (m√°s de 24 horas)
          OLD_BRANCHES=$(git for-each-ref --format='%(refname:short) %(committerdate:unix)' refs/remotes/origin/chore/update-submodules-* | \
            awk -v cutoff=$(date -d '24 hours ago' +%s) '$2 < cutoff {print $1}' | sed 's/origin\///')
          
          if [ -n "$OLD_BRANCHES" ]; then
            echo "Found old branches (>24h):"
            echo "$OLD_BRANCHES"
            
            echo "BRANCHES_DELETED<<EOF" >> $GITHUB_OUTPUT
            for branch in $OLD_BRANCHES; do
              echo "Deleting branch: $branch"
              if git push origin --delete "$branch" 2>/dev/null; then
                echo "‚úÖ $branch" >> $GITHUB_OUTPUT
              else
                echo "‚ùå $branch (already deleted or protected)" >> $GITHUB_OUTPUT
              fi
            done
            echo "EOF" >> $GITHUB_OUTPUT
          else
            echo "No old branches found to clean"
            echo "BRANCHES_DELETED=No branches needed cleanup" >> $GITHUB_OUTPUT
          fi

  # Job 2: Verificar cambios en subm√≥dulos
  check-submodule-changes:
    name: üîç Check Submodule Updates
    runs-on: ubuntu-latest
    needs: cleanup-old-branches
    outputs:
      has-changes: ${{ steps.changes.outputs.changes }}
      submodule-status: ${{ steps.changes.outputs.status }}
      changes-summary: ${{ steps.changes.outputs.summary }}
    
    steps:
      - name: Checkout with submodules
        uses: actions/checkout@v4
        with:
          submodules: recursive
          fetch-depth: 0

      - name: Generate GitHub App Token
        id: app-token
        uses: tibdex/github-app-token@v2
        with:
          app_id: ${{ secrets.BOOK_MASTER_NET_GITHUB_APP_ID }}
          private_key: ${{ secrets.BOOK_MASTER_NET_GITHUB_APP_PRIVATE_KEY }}
          installation_retrieval_mode: repository
          installation_retrieval_payload: ${{ github.repository }}

      - name: Re-checkout with App Token
        uses: actions/checkout@v4
        with:
          token: ${{ steps.app-token.outputs.token }}
          submodules: recursive
          fetch-depth: 0

      - name: Configure Git identity
        run: |
          git config user.name "submodule-bot[app]"
          git config user.email "submodule-bot[app]@users.noreply.github.com"
          git config --global url."https://${{ steps.app-token.outputs.token }}@github.com/".insteadOf "https://github.com/"

      - name: Capture current submodule status
        run: |
          echo "=== Current Submodule Status ===" > submodule_before.txt
          git submodule status >> submodule_before.txt
          cat submodule_before.txt

      - name: Update submodules
        run: |
          echo "üîÑ Updating submodules..."
          git submodule update --remote --merge --progress
          
          echo "=== Updated Submodule Status ===" > submodule_after.txt
          git submodule status >> submodule_after.txt
          cat submodule_after.txt

      - name: Analyze changes and generate summary
        id: changes
        run: |
          echo "üîç Analyzing changes..."
          
          if [[ -n "$(git status --porcelain)" ]]; then
            echo "‚úÖ Changes detected"
            echo "changes=true" >> $GITHUB_OUTPUT
            echo "status=changes-found" >> $GITHUB_OUTPUT
            
            # Generar resumen detallado de cambios
            SUMMARY=""
            
            # Analizar cada subm√≥dulo cambiado
            for submodule in $(git diff --name-only | grep -v submodule_); do
              if [ -d "$submodule" ]; then
                cd "$submodule"
                
                # Obtener el commit anterior y actual
                OLD_COMMIT=$(git log --oneline -1 HEAD~1 2>/dev/null | cut -d' ' -f1 || echo "unknown")
                NEW_COMMIT=$(git log --oneline -1 HEAD 2>/dev/null | cut -d' ' -f1 || echo "unknown")
                
                # Obtener logs entre commits si es posible
                if [ "$OLD_COMMIT" != "unknown" ] && [ "$NEW_COMMIT" != "unknown" ] && [ "$OLD_COMMIT" != "$NEW_COMMIT" ]; then
                  COMMITS_COUNT=$(git rev-list --count ${OLD_COMMIT}..${NEW_COMMIT} 2>/dev/null || echo "0")
                  RECENT_COMMITS=$(git log --oneline -5 ${OLD_COMMIT}..${NEW_COMMIT} 2>/dev/null || echo "No commit details available")
                  
                  SUMMARY="${SUMMARY}
            
            ### üì¶ $submodule
            - **Commits updated**: $COMMITS_COUNT
            - **From**: \`$OLD_COMMIT\`
            - **To**: \`$NEW_COMMIT\`
            
            **Recent changes**:
            \`\`\`
            $RECENT_COMMITS
            \`\`\`"
                else
                  SUMMARY="${SUMMARY}
            
            ### üì¶ $submodule
            - **Status**: Updated (commit details not available)"
                fi
                
                cd ..
              fi
            done
            
            if [ -z "$SUMMARY" ]; then
              SUMMARY="
            ### üì¶ Submodule Updates
            - Submodules have been updated to their latest versions
            - Specific change details are being processed..."
            fi
            
            # Guardar el resumen en el output (escapando caracteres especiales)
            {
              echo "summary<<EOF"
              echo "$SUMMARY"
              echo "EOF"
            } >> $GITHUB_OUTPUT
            
          else
            echo "‚ÑπÔ∏è No changes detected"
            echo "changes=false" >> $GITHUB_OUTPUT
            echo "status=no-changes" >> $GITHUB_OUTPUT
            echo "summary=No submodule updates available" >> $GITHUB_OUTPUT
          fi

      - name: Upload change artifacts
        if: steps.changes.outputs.changes == 'true'
        uses: actions/upload-artifact@v4
        with:
          name: submodule-changes
          path: |
            submodule_before.txt
            submodule_after.txt

  # Job 3: Crear Pull Request con an√°lisis detallado
  create-pull-request:
    name: üìã Create Detailed Pull Request
    runs-on: ubuntu-latest
    needs: check-submodule-changes
    if: needs.check-submodule-changes.outputs.has-changes == 'true'
    
    steps:
      - name: Checkout with token
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Generate GitHub App Token
        id: app-token
        uses: tibdex/github-app-token@v2
        with:
          app_id: ${{ secrets.BOOK_MASTER_NET_GITHUB_APP_ID }}
          private_key: ${{ secrets.BOOK_MASTER_NET_GITHUB_APP_PRIVATE_KEY }}
          installation_retrieval_mode: repository
          installation_retrieval_payload: ${{ github.repository }}

      - name: Re-checkout with App Token and submodules
        uses: actions/checkout@v4
        with:
          token: ${{ steps.app-token.outputs.token }}
          submodules: recursive
          fetch-depth: 0

      - name: Configure Git
        run: |
          git config user.name "submodule-bot[app]"
          git config user.email "submodule-bot[app]@users.noreply.github.com"
          git config --global url."https://${{ steps.app-token.outputs.token }}@github.com/".insteadOf "https://github.com/"

      - name: Update submodules (reproduce changes)
        run: git submodule update --remote --merge --progress

      - name: Download change artifacts
        uses: actions/download-artifact@v4
        with:
          name: submodule-changes
          path: ./

      - name: Create Pull Request with detailed analysis
        uses: peter-evans/create-pull-request@v5
        with:
          token: ${{ steps.app-token.outputs.token }}
          commit-message: "chore: update submodules [skip ci]"
          title: "ü§ñ Auto-update submodules (Run #${{ github.run_number }})"
          body: |
            ## üì¶ Submodule Updates
            
            ${{ needs.check-submodule-changes.outputs.changes-summary }}
            
            ---
            
            ## üîç Workflow Details
            - **Run Number**: #${{ github.run_number }}
            - **Triggered by**: ${{ github.event_name }}
            - **Timestamp**: ${{ github.event.head_commit.timestamp }}
            - **Repository**: ${{ github.repository }}
            
            ## üìã Review Checklist
            - [ ] Verify submodule updates are expected
            - [ ] Check for any breaking changes
            - [ ] Ensure CI/CD compatibility
            
            ---
            *ü§ñ Created automatically by submodule-bot. View [workflow run](${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}) for details.*
          branch: chore/update-submodules-${{ github.run_number }}
          delete-branch: true
          reviewers: remr11
          assignees: remr11

  # Job 4: Reportar estado final
  report-status:
    name: üìä Report Final Status
    runs-on: ubuntu-latest
    needs: [cleanup-old-branches, check-submodule-changes, create-pull-request]
    if: always()
    
    steps:
      - name: Generate status report
        run: |
          echo "## üìä Submodule Update Workflow Report"
          echo "**Run #${{ github.run_number }}** - $(date)"
          echo ""
          
          echo "### üßπ Branch Cleanup"
          echo "Status: ${{ needs.cleanup-old-branches.result }}"
          
          echo ""
          echo "### üîç Change Detection" 
          echo "Status: ${{ needs.check-submodule-changes.result }}"
          echo "Changes Found: ${{ needs.check-submodule-changes.outputs.has-changes }}"
          
          echo ""
          echo "### üìã Pull Request Creation"
          if [ "${{ needs.check-submodule-changes.outputs.has-changes }}" == "true" ]; then
            echo "Status: ${{ needs.create-pull-request.result }}"
          else
            echo "Status: Skipped (no changes)"
          fi
          
          echo ""
          echo "### üéØ Overall Result"
          if [ "${{ needs.create-pull-request.result }}" == "success" ] || [ "${{ needs.check-submodule-changes.outputs.has-changes }}" == "false" ]; then
            echo "‚úÖ Workflow completed successfully"
          else
            echo "‚ùå Workflow encountered issues"
          fi

  # Job 5: Limpieza de emergencia (solo en caso de fallo)
  emergency-cleanup:
    name: üö® Emergency Cleanup
    runs-on: ubuntu-latest
    needs: [cleanup-old-branches, check-submodule-changes, create-pull-request]
    if: failure()
    
    steps:
      - name: Checkout for cleanup
        uses: actions/checkout@v4

      - name: Generate GitHub App Token for cleanup
        id: app-token
        uses: tibdex/github-app-token@v2
        with:
          app_id: ${{ secrets.BOOK_MASTER_NET_GITHUB_APP_ID }}
          private_key: ${{ secrets.BOOK_MASTER_NET_GITHUB_APP_PRIVATE_KEY }}
          installation_retrieval_mode: repository
          installation_retrieval_payload: ${{ github.repository }}

      - name: Emergency branch cleanup
        continue-on-error: true
        run: |
          echo "üö® Performing emergency cleanup due to workflow failure..."
          git config --global url."https://${{ steps.app-token.outputs.token }}@github.com/".insteadOf "https://github.com/"
          
          CURRENT_BRANCH="chore/update-submodules-${{ github.run_number }}"
          
          echo "Attempting to delete branch: $CURRENT_BRANCH"
          git push origin --delete "$CURRENT_BRANCH" 2>/dev/null || echo "Branch $CURRENT_BRANCH not found or already deleted"
          
          echo "‚úÖ Emergency cleanup completed"
